Итоговый тест по программе дистанционного курса «Курс JavaScript: современныe возможности языка»

1. Сколько типов данных в языке JavaScript?
Правильный ответ: 7

2. Выберите правильный результат выражения 34 + 21 + '17':
Правильный ответ: 5517

3. Какой из операторов необходимо подставить вместо <1>, <2>, <3> и <4>, чтобы код выполнился без ошибок, и после выполнения x === 1 && y === 2 && z === 3?
<1> x = 1;
if (x) {
   <2> y = 2;
   <3> z = 4;
}
((z) => {
   var x = 1;
   return x + z;
})(y);
<4> z = 3;

Правильный ответ: 1: let, 2: var, 3: const, 4: let

4. Что будет результатом выражения?
[1, 2, 3, 4, 5].join().indexOf('4') + [1, 2, 3, 4, 5].indexOf('3')

Правильный ответ: 5

5. Какие методы массива нужно использовать, чтобы first содержал [ 1, 3, 5 ], second — [ '00', '01', '02', '03', '04' ], third — 2, fourth — 15 и fifth — undefined
const numbers = [1, 2, 3, 4, 5];
const first = numbers.<1>((a, b) => a % 2);
const second = numbers.<2>((a, b) => '0' + b);
const third = numbers.<3>((a, b) => b % 7);
const fourth = numbers.<4>((a, b) => a + b);
const fifth = numbers.<5>((a, b) => a);

Правильный ответ: 1: filter, 2: map, 3: find, 4: reduce, 5: forEach

6. В каком из наборов все три метода массива изменяют сам массив?

Правильный ответ: sort, splice, shift

7. Какие аргументы ожидает метод sort массива?

Правильный ответ: В первом аргументе ожидает функцию, но работает и без аргументов

8. Назовите все переменные замыкания для каждой функции:
let step = 10;
let counter = 0;
function next() {
   let step = 1;
   return counter += step;
}
function createCounter(from) {
   let step = -1;
   return function prev() {
     return from > 0 ? from += step : 0;
   }
}

Правильный ответ: next: counter; createCounter: нет; prev: from и step

9. Какое значение будет в переменной result после выполнения этого кода?
const a = 1, b = 5;
function first(b) {
   let a = 2, c = 3;
   function second(c) {
     return a + b + c;
   }
   return second;
}
var third = first(4);
const result = third(a);

Правильный ответ: 7

10. Какое значение будет в переменной year, если сейчас 2017 год?
const user = {
   age: 42,
   getYear() {
     return new Date().getFullYear() - this.age;
   }
}
const yearFunc = user.getYear.bind({ age: 7 });
yearFunc.call({ age: 12 });

Правильный ответ: 2010

11. Данный код выдает ошибку TypeError: Cannot read property 'items' of undefined. Какой из вариантов исправит ошибку и не приведет к новым возможным ошибкам?
const cart = {
   items: [],
   add(item) {
     this.items.push(item);
   }
}
function getItem(callback) {
   callback({ title: 'Телепорт бытовой VZHIH-101' })
}
getItem(cart.add);

Правильный ответ: getItem(item => cart.add(item));

12. Что будет в переменной value?
function MyNumber(number = 42) {
   this.number = number;
   return number;
}

let value = new MyNumber(99);

Правильный ответ: Объект со свойством number, равным 99

13. Какой результат вернет typeof для Dog, Cat и Fish в этом коде?
class Dog {}
function Cat() {}
const Fish = function () {};

Правильный ответ: Dog: function, Cat: function, Fish: function

14. Какой результат вернет typeof для bob, simon и elsa в этом коде?
class Dog {}
function Cat() {}
const Fish = function () {};

const bob = new Dog();
const simon = Cat();
const elsa = new Fish();

Правильный ответ: bob: object, simon: undefined, elsa: object

15. Прототип в JavaScript — это:

Правильный ответ: Объект

16. В каком из вариантов ответа для каждого из Array['prototype'], Number, String.indexOf 
подобрана подходящая пара typeof из function, object, undefined?

Правильный ответ: Array['prototype']: object, Number: function, String.indexOf: undefined

17. Какое из выражений вернет истину?
function A() {}
function B() {}
A.prototype = Object.create(B.prototype);
A.prototype.constructor = A;

const a = new A;
const b = new B;

Правильный ответ: B.prototype.isPrototypeOf(a)

18. Какое из выражений вернет истину?
class A {}
class B extends A {}

const a = new A;
const b = new B;

Правильный ответ: A.prototype.isPrototypeOf(B.prototype)

19. Какой результат будет в переменной diff?
class GrandFather {
   constructor(age) {
     this.age = age;
   }
   get wifeAge() {
     return this.age - 7;
   }
}

class Father extends GrandFather {
   get wifeAge() {
     return this.age + 2;
   }
}

const ivan = new GrandFather(73);
const viktorIvanovich = new Father(45);

const diff = Math.abs(ivan.wifeAge - viktorIvanovich.wifeAge);

Правильный ответ: 19

20. Какое имя будет выведено в консоль первым?
function first() {
   console.log('Иван');
}
function second() {
   console.log('Олег');
}

setTimeout(first(), 5000);
setTimeout(() => second(), 2000);

Правильный ответ: Иван

21. Какое из выражений вернёт истину?

Правильный ответ: Symbol.for('123') === Symbol.for(123)

22. Что будет выведено в консоль?
const items = {
   [Symbol.iterator]() {
     return this;
   },
   next() {
     return { done: true, value: 42 };
   }
}
for (let item of items) {
   console.log(item);
}

Правильный ответ: Ничего

23. Сколько итераций цикла for (let item of getItems(4)) {} будет, если генератор getItems реализован так:
function* getItems(n) {
   return yield yield n;
}

Правильный ответ: 2

24. Какой вариант можно считать полным аналогом примера, если предположить, 
что для каждой асинхронной функции *Async реализован аналог на промисах?
getDataAsync((err, data) => {
   processDataAsync(data, (err, result) => {
     console.log(result);
   });
});

Правильный ответ: getData().then(processData).then(result => console.log(result))

25. Какие значения будут в переменных a, b и c?
const list = {
   *[Symbol.iterator]() {
     let i = 3;
     do {
       yield i--;
     } while (i > 0)
   }
}
const [, a, b, ...c] = list;

Правильный ответ: a = 2, b = 1, c = []
